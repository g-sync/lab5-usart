
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  0000027a  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000087  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000301  00000000  00000000  0000040f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c1  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002fc  00000000  00000000  000008d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000145  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000014e  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 35       	cpi	r26, 0x5A	; 90
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 89 00 	call	0x112	; 0x112 <main>
  8e:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <parserecCommand>:
#define LED6 PB5

#define STX 2
#define ETX 3

void parserecCommand(const char* recCommand) {
  96:	fc 01       	movw	r30, r24
    if (recCommand[1]== '2' && recCommand[7] == '3') {
  98:	81 81       	ldd	r24, Z+1	; 0x01
  9a:	82 33       	cpi	r24, 0x32	; 50
  9c:	c9 f5       	brne	.+114    	; 0x110 <parserecCommand+0x7a>
  9e:	87 81       	ldd	r24, Z+7	; 0x07
  a0:	83 33       	cpi	r24, 0x33	; 51
  a2:	b1 f5       	brne	.+108    	; 0x110 <parserecCommand+0x7a>
        if (recCommand[5] == '1') {
  a4:	85 81       	ldd	r24, Z+5	; 0x05
  a6:	81 33       	cpi	r24, 0x31	; 49
  a8:	c9 f4       	brne	.+50     	; 0xdc <parserecCommand+0x46>
            if (recCommand[3] == '1') {
  aa:	83 81       	ldd	r24, Z+3	; 0x03
  ac:	81 33       	cpi	r24, 0x31	; 49
  ae:	11 f4       	brne	.+4      	; 0xb4 <parserecCommand+0x1e>
                PORTB |= (1 << LED1);  // Turn on LED1
  b0:	28 9a       	sbi	0x05, 0	; 5
  b2:	08 95       	ret
            } 
            else if (recCommand[3] == '2') {
  b4:	82 33       	cpi	r24, 0x32	; 50
  b6:	11 f4       	brne	.+4      	; 0xbc <parserecCommand+0x26>
                PORTB |= (1 << LED2);  // Turn on LED2
  b8:	29 9a       	sbi	0x05, 1	; 5
  ba:	08 95       	ret
            } 
            else if (recCommand[3] == '3') {
  bc:	83 33       	cpi	r24, 0x33	; 51
  be:	11 f4       	brne	.+4      	; 0xc4 <parserecCommand+0x2e>
                PORTB |= (1 << LED3);  // Turn on LED3
  c0:	2a 9a       	sbi	0x05, 2	; 5
  c2:	08 95       	ret
            } 
            else if (recCommand[3] == '4') {
  c4:	84 33       	cpi	r24, 0x34	; 52
  c6:	11 f4       	brne	.+4      	; 0xcc <parserecCommand+0x36>
                PORTB |= (1 << LED4);  // Turn on LED4
  c8:	2b 9a       	sbi	0x05, 3	; 5
  ca:	08 95       	ret
            } 
            else if (recCommand[3] == '5') {
  cc:	85 33       	cpi	r24, 0x35	; 53
  ce:	11 f4       	brne	.+4      	; 0xd4 <parserecCommand+0x3e>
                PORTB |= (1 << LED5);  // Turn on LED5
  d0:	2c 9a       	sbi	0x05, 4	; 5
  d2:	08 95       	ret
            } 
            else if (recCommand[3] == '6') {
  d4:	86 33       	cpi	r24, 0x36	; 54
  d6:	e1 f4       	brne	.+56     	; 0x110 <parserecCommand+0x7a>
                PORTB |= (1 << LED6);  // Turn on LED6
  d8:	2d 9a       	sbi	0x05, 5	; 5
  da:	08 95       	ret
            } 
            else { 
                return;
            }
        }
        else if (recCommand[5] == '0') {
  dc:	80 33       	cpi	r24, 0x30	; 48
  de:	c1 f4       	brne	.+48     	; 0x110 <parserecCommand+0x7a>
            if (recCommand[3] == '1') {
  e0:	83 81       	ldd	r24, Z+3	; 0x03
  e2:	81 33       	cpi	r24, 0x31	; 49
  e4:	11 f4       	brne	.+4      	; 0xea <parserecCommand+0x54>
                PORTB &= ~(1 << LED1);  // Turn off LED1
  e6:	28 98       	cbi	0x05, 0	; 5
  e8:	08 95       	ret
            } 
            else if (recCommand[3] == '2') {
  ea:	82 33       	cpi	r24, 0x32	; 50
  ec:	11 f4       	brne	.+4      	; 0xf2 <parserecCommand+0x5c>
                PORTB &= ~(1 << LED2);  // Turn off LED2
  ee:	29 98       	cbi	0x05, 1	; 5
  f0:	08 95       	ret
            } 
            else if (recCommand[3] == '3') {
  f2:	83 33       	cpi	r24, 0x33	; 51
  f4:	11 f4       	brne	.+4      	; 0xfa <parserecCommand+0x64>
                PORTB &= ~(1 << LED3);  // Turn off LED3
  f6:	2a 98       	cbi	0x05, 2	; 5
  f8:	08 95       	ret
            } 
            else if (recCommand[3] == '4') {
  fa:	84 33       	cpi	r24, 0x34	; 52
  fc:	11 f4       	brne	.+4      	; 0x102 <parserecCommand+0x6c>
                PORTB &= ~(1 << LED4);  // Turn off LED4
  fe:	2b 98       	cbi	0x05, 3	; 5
 100:	08 95       	ret
            } 
            else if (recCommand[3] == '5') {
 102:	85 33       	cpi	r24, 0x35	; 53
 104:	11 f4       	brne	.+4      	; 0x10a <parserecCommand+0x74>
                PORTB &= ~(1 << LED5);  // Turn off LED5
 106:	2c 98       	cbi	0x05, 4	; 5
 108:	08 95       	ret
            } 
            else if (recCommand[3] == '6') {
 10a:	86 33       	cpi	r24, 0x36	; 54
 10c:	09 f4       	brne	.+2      	; 0x110 <parserecCommand+0x7a>
                PORTB &= ~(1 << LED6);  // Turn off LED6
 10e:	2d 98       	cbi	0x05, 5	; 5
 110:	08 95       	ret

00000112 <main>:
        }
    }
}


int main() {
 112:	cf 92       	push	r12
 114:	df 92       	push	r13
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	c2 56       	subi	r28, 0x62	; 98
 128:	d0 40       	sbci	r29, 0x00	; 0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;  // Set all PORTB pins as outputs
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	84 b9       	out	0x04, r24	; 4

    const char str1[] = "\n\r USART 6 LED String Switch \n\r";
 138:	de 01       	movw	r26, r28
 13a:	ad 5b       	subi	r26, 0xBD	; 189
 13c:	bf 4f       	sbci	r27, 0xFF	; 255
 13e:	e0 e0       	ldi	r30, 0x00	; 0
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	01 90       	ld	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x32>
    const char str2[] = "\n\r Type input and hit Enter: ";
 14c:	de 01       	movw	r26, r28
 14e:	95 96       	adiw	r26, 0x25	; 37
 150:	e0 e2       	ldi	r30, 0x20	; 32
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	8e e1       	ldi	r24, 0x1E	; 30
 156:	01 90       	ld	r0, Z+
 158:	0d 92       	st	X+, r0
 15a:	81 50       	subi	r24, 0x01	; 1
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x44>
    const char str4[] = "\n\r Wrong input!! Try Again ";
 15e:	de 01       	movw	r26, r28
 160:	19 96       	adiw	r26, 0x09	; 9
 162:	ee e3       	ldi	r30, 0x3E	; 62
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	8c e1       	ldi	r24, 0x1C	; 28
 168:	01 90       	ld	r0, Z+
 16a:	0d 92       	st	X+, r0
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x56>
   
    Uart_Init(MY_UBRR0);
 170:	87 e6       	ldi	r24, 0x67	; 103
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Uart_Init>
    Uart_Puts(str1);  
 178:	ce 01       	movw	r24, r28
 17a:	8d 5b       	subi	r24, 0xBD	; 189
 17c:	9f 4f       	sbci	r25, 0xFF	; 255
 17e:	0e 94 02 01 	call	0x204	; 0x204 <Uart_Puts>

    char recCommand[MaxLenGets];

    while (1) {

        Uart_Puts(str2);
 182:	95 e2       	ldi	r25, 0x25	; 37
 184:	c9 2e       	mov	r12, r25
 186:	d1 2c       	mov	r13, r1
 188:	cc 0e       	add	r12, r28
 18a:	dd 1e       	adc	r13, r29
        Uart_Gets(recCommand, MaxLenGets);
 18c:	8e 01       	movw	r16, r28
 18e:	0f 5f       	subi	r16, 0xFF	; 255
 190:	1f 4f       	sbci	r17, 0xFF	; 255
    
        // Check for proper encapsulation
        if (recCommand[1] ==  '2' && recCommand[7] == '3') {
            parserecCommand(recCommand);
        } else {
            Uart_Puts(str4);
 192:	89 e0       	ldi	r24, 0x09	; 9
 194:	e8 2e       	mov	r14, r24
 196:	f1 2c       	mov	r15, r1
 198:	ec 0e       	add	r14, r28
 19a:	fd 1e       	adc	r15, r29

    char recCommand[MaxLenGets];

    while (1) {

        Uart_Puts(str2);
 19c:	c6 01       	movw	r24, r12
 19e:	0e 94 02 01 	call	0x204	; 0x204 <Uart_Puts>
        Uart_Gets(recCommand, MaxLenGets);
 1a2:	c8 01       	movw	r24, r16
 1a4:	68 e0       	ldi	r22, 0x08	; 8
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 0f 01 	call	0x21e	; 0x21e <Uart_Gets>
        
        // Wait for data to be 
        while (!(UCSR0A & (1 << RXC0)))
 1ac:	80 91 c0 00 	lds	r24, 0x00C0
 1b0:	87 ff       	sbrs	r24, 7
 1b2:	fc cf       	rjmp	.-8      	; 0x1ac <main+0x9a>
            ;
        // Receive the character
    
        // Check for proper encapsulation
        if (recCommand[1] ==  '2' && recCommand[7] == '3') {
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	82 33       	cpi	r24, 0x32	; 50
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <main+0xb6>
 1ba:	88 85       	ldd	r24, Y+8	; 0x08
 1bc:	83 33       	cpi	r24, 0x33	; 51
 1be:	21 f4       	brne	.+8      	; 0x1c8 <main+0xb6>
            parserecCommand(recCommand);
 1c0:	c8 01       	movw	r24, r16
 1c2:	0e 94 4b 00 	call	0x96	; 0x96 <parserecCommand>
 1c6:	ea cf       	rjmp	.-44     	; 0x19c <main+0x8a>
        } else {
            Uart_Puts(str4);
 1c8:	c7 01       	movw	r24, r14
 1ca:	0e 94 02 01 	call	0x204	; 0x204 <Uart_Puts>
 1ce:	e6 cf       	rjmp	.-52     	; 0x19c <main+0x8a>

000001d0 <Uart_Init>:
void Uart_Init( unsigned int baud_prescale )
{
    /* Set baud rate */
    //UBRR0H = (unsigned char)(baud>>8);
    //UBRR0L = (unsigned char)baud;
    UBRR0 = baud_prescale;
 1d0:	90 93 c5 00 	sts	0x00C5, r25
 1d4:	80 93 c4 00 	sts	0x00C4, r24
    /* Enable receiver and transmitter */
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1d8:	88 e1       	ldi	r24, 0x18	; 24
 1da:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: 8data, 1stop bit */
    UCSR0C = (3<<UCSZ00);
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	80 93 c2 00 	sts	0x00C2, r24
}
 1e4:	08 95       	ret

000001e6 <Uart_Putc>:


void Uart_Putc( unsigned char data )
{
 1e6:	98 2f       	mov	r25, r24
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
 1e8:	80 91 c0 00 	lds	r24, 0x00C0
 1ec:	85 ff       	sbrs	r24, 5
 1ee:	fc cf       	rjmp	.-8      	; 0x1e8 <Uart_Putc+0x2>
    /* Put data into buffer, sends the data */
    UDR0 = data;
 1f0:	90 93 c6 00 	sts	0x00C6, r25
}
 1f4:	08 95       	ret

000001f6 <Uart_Getc>:

unsigned char Uart_Getc( void )
{
    /* Wait for data to be received */
    while ( !(UCSR0A & (1<<RXC0)) );
 1f6:	80 91 c0 00 	lds	r24, 0x00C0
 1fa:	87 ff       	sbrs	r24, 7
 1fc:	fc cf       	rjmp	.-8      	; 0x1f6 <Uart_Getc>
    /* Get and return received data from buffer */
    return UDR0;
 1fe:	80 91 c6 00 	lds	r24, 0x00C6
}
 202:	08 95       	ret

00000204 <Uart_Puts>:

void Uart_Puts(const char *s )
{
 204:	fc 01       	movw	r30, r24
 206:	07 c0       	rjmp	.+14     	; 0x216 <Uart_Puts+0x12>


void Uart_Putc( unsigned char data )
{
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
 208:	80 91 c0 00 	lds	r24, 0x00C0
 20c:	85 ff       	sbrs	r24, 5
 20e:	fc cf       	rjmp	.-8      	; 0x208 <Uart_Puts+0x4>
}

void Uart_Puts(const char *s )
{
    while (*s) 
      Uart_Putc(*s++);
 210:	31 96       	adiw	r30, 0x01	; 1
void Uart_Putc( unsigned char data )
{
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
    /* Put data into buffer, sends the data */
    UDR0 = data;
 212:	90 93 c6 00 	sts	0x00C6, r25
    return UDR0;
}

void Uart_Puts(const char *s )
{
    while (*s) 
 216:	90 81       	ld	r25, Z
 218:	99 23       	and	r25, r25
 21a:	b1 f7       	brne	.-20     	; 0x208 <Uart_Puts+0x4>
      Uart_Putc(*s++);

}
 21c:	08 95       	ret

0000021e <Uart_Gets>:
This is a modified Gets that will print back the inputed character 
while string is being saved.
The string is terminated with a carriage return and the MaxLen
*/
void Uart_Gets(char* Buffer, int MaxLen)
{
 21e:	58 2f       	mov	r21, r24
 220:	29 2f       	mov	r18, r25
}

unsigned char Uart_Getc( void )
{
    /* Wait for data to be received */
    while ( !(UCSR0A & (1<<RXC0)) );
 222:	80 91 c0 00 	lds	r24, 0x00C0
 226:	87 ff       	sbrs	r24, 7
 228:	fc cf       	rjmp	.-8      	; 0x222 <Uart_Gets+0x4>
    /* Get and return received data from buffer */
    return UDR0;
 22a:	40 91 c6 00 	lds	r20, 0x00C6


void Uart_Putc( unsigned char data )
{
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
 22e:	80 91 c0 00 	lds	r24, 0x00C0
 232:	85 ff       	sbrs	r24, 5
 234:	fc cf       	rjmp	.-8      	; 0x22e <Uart_Gets+0x10>
    /* Put data into buffer, sends the data */
    UDR0 = data;
 236:	40 93 c6 00 	sts	0x00C6, r20
 23a:	85 2f       	mov	r24, r21
 23c:	92 2f       	mov	r25, r18
 23e:	9c 01       	movw	r18, r24
 240:	f9 01       	movw	r30, r18

  NextChar = Uart_Getc();              	// gets the first character of the string          
  Uart_Putc(NextChar);					// and prints it
  
  // check if the maximum length has been reached or if carriage return has been detected
  while((NextChar != '\r') && (StringLen < MaxLen - 1))    
 242:	61 50       	subi	r22, 0x01	; 1
 244:	70 40       	sbci	r23, 0x00	; 0
 246:	0e c0       	rjmp	.+28     	; 0x264 <Uart_Gets+0x46>
  {
    *Buffer++ = NextChar;
 248:	40 83       	st	Z, r20
}

unsigned char Uart_Getc( void )
{
    /* Wait for data to be received */
    while ( !(UCSR0A & (1<<RXC0)) );
 24a:	80 91 c0 00 	lds	r24, 0x00C0
 24e:	87 ff       	sbrs	r24, 7
 250:	fc cf       	rjmp	.-8      	; 0x24a <Uart_Gets+0x2c>
    /* Get and return received data from buffer */
    return UDR0;
 252:	40 91 c6 00 	lds	r20, 0x00C6


void Uart_Putc( unsigned char data )
{
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
 256:	80 91 c0 00 	lds	r24, 0x00C0
 25a:	85 ff       	sbrs	r24, 5
 25c:	fc cf       	rjmp	.-8      	; 0x256 <Uart_Gets+0x38>
  Uart_Putc(NextChar);					// and prints it
  
  // check if the maximum length has been reached or if carriage return has been detected
  while((NextChar != '\r') && (StringLen < MaxLen - 1))    
  {
    *Buffer++ = NextChar;
 25e:	31 96       	adiw	r30, 0x01	; 1
void Uart_Putc( unsigned char data )
{
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
    /* Put data into buffer, sends the data */
    UDR0 = data;
 260:	40 93 c6 00 	sts	0x00C6, r20
 264:	8e 2f       	mov	r24, r30
 266:	85 1b       	sub	r24, r21

  NextChar = Uart_Getc();              	// gets the first character of the string          
  Uart_Putc(NextChar);					// and prints it
  
  // check if the maximum length has been reached or if carriage return has been detected
  while((NextChar != '\r') && (StringLen < MaxLen - 1))    
 268:	4d 30       	cpi	r20, 0x0D	; 13
 26a:	21 f0       	breq	.+8      	; 0x274 <Uart_Gets+0x56>
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	86 17       	cp	r24, r22
 270:	97 07       	cpc	r25, r23
 272:	54 f3       	brlt	.-44     	; 0x248 <Uart_Gets+0x2a>
 274:	08 95       	ret

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
